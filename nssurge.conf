[General]
# Internet 测试 URL
internet-test-url = http://www.aliyun.com
# 代理测速 URL
proxy-test-url = http://1.1.1.1
# 测试超时（秒）:Surge 将向该 URL 发送一个 HTTP HEAD 请求。测试只关心是否收到了返回数据，并不关心数据内容。仅支持 http:// 协议
test-timeout = 5
# UDP 代理转发测试指定：默认向 8.8.8.8 查询 apple.com，可使用 proxy-test-udp 参数修改，如 proxy-test-udp = google.com@1.1.1.1
# proxy-test-udp = google.com@1.1.1.1
# 增强版 Wi-Fi 助理
# Surge 会在 Wi-Fi 网络不佳时尝试使用数据网络建立连接。该功能将对所有连接生效，请仅当使用不限量的数据流量时开启。
wifi-assist = false
# 混合网络：无论 Wi-Fi 信号如何，总是尝试并发使用 Wi-Fi 和数据网络连接。开启后，等同于对所有策略设置 hybrid = true，所有 TCP 连接在建立时均会并发尝试数据网络和 WiFi 连接，也就说如果不想对所有策略启用「混合网络」可以指定目标策略使用，如：
# HYBRID = direct, hybrid=true
# 但实际上可以不用这么写，因为 Surge 新增了两个内置策略：
# HYBRID：等价于 HYBRID = direct, hybrid=true
# NO-HYBRID ：等价于 NO-HYBRID = direct, hybrid=off
# 对于 DIRECT 的「混合网络」应用，可以使用直接使上述两个内置策略。
# 至于其他策略，「混合网络」的参数说明如下：
# hybrid=auto：默认，使用全局设置也就是使用 [General] 下的 all-hybrid 设置；
# hybrid=on 或 hybrid=true：对该策略启动并发连接；
# hybrid=off：即使在 All Hybrid 或 WiFi Assist 开启时，有 WiFi 就不使用数据网络；
# 除此之外，所有 DNS 查询操作也都将并发在数据网络和 WiFi 上进行。所以若想体验该功能，请手动配置公网 DNS，暂不支持 DOH。
# 该选项可显著改善在弱 Wi-Fi 和网络切换时的网络体验。该选项对所有 TCP 连接和 DNS 查询生效。请仅当使用不限量的数据流量套餐时开启。
all-hybrid = true
# 「Wi-Fi 助理」和「混合网络」的区别：
# WiFi Assist：使用 WiFi 尝试建立连接后，如果一秒钟内仍未完成，则再使用数据网络尝试连接。选择最先完成的 TCP 连接；
# Hybrid：直接并发建立两个 TCP 连接，选择最先完成的 TCP 连接.
# GeoIP 数据库，默认使用surge自带.Surge 默认是使用由 MaxMind 创建的 GeoLite2 数据库，但是它的信息不是那么的准确，从 Surge iOS 4.5.0 开始可以自定义 GeoIP 数据的 URL，需要为 MaxMind 的格式。
# 如果想使用第三方GeoIP，下面两个二选一即可，也可自行更换为其它第三方
# 在配置信息设置好 geoip-maxmind-url 后建议在图形界面打开「自动更新」开关（或者直接在图形界面中设置 URL 及开关）
geoip-maxmind-url = https://cdn.jsdelivr.net/gh/Hackl0us/GeoIP2-CN@release/Country.mmdb
# geoip-maxmind-url = https://raw.githubusercontent.com/NobyDa/geoip/release/Private-GeoIP-CN.mmdb
# GeoIP 禁用自动更新
disable-geoip-db-auto-update = false
# 是否启动完整的 IPv6 支持 (默认值: false)参数：true：开启，false：关闭
ipv6 = false
# Surge VIF IPv6 Stack
# 允许 IPv6 通过 Surge VIF。当希望 Surge 处理连接到 IPv6 地址的原始 TCP 连接时非常有用。可选项：true，false，auto，always
ipv6-vif = auto
# ⚠️ 隐藏状态栏上的VPN图标，启动该选项可能导致「Cannot allocate memory」系统错误，请谨慎使用，本配置在开启IP v6选项时失效
# hide-vpn-icon = true
# Wi-Fi 访问
# Surge 可以作为 HTTP/SOCKS5 代理服务器向 Wi-Fi 网络下的其他设备提供服务器
allow-wifi-access = false
# Surge Mac 供外网访问的服务端口
# HTTP 服务端口 (默认值: 6152)
# http-listen = 0.0.0.0:6152
# SOCKS5 服务端口 (默认值: 6153)
# socks5-listen = 0.0.0.0:6153
# Surge iOS 供外网访问的服务端口
# HTTP 服务端口 (默认值: 6152)
# wifi-access-http-port = 6152
# SOCKS5 服务端口 (默认值: 6153)
# wifi-access-socks5-port = 6153
# 远程控制器
# 允许外部控制器访问 Surge，Surge Dashboard 或 Surge CLI 进行管理控制
# 默认仅允许外部控制器通过 USB 进行控制。如果想要允许由 Wi-Fi 控制可以将 127.0.0.1 改为 0.0.0.0
external-controller-access = jivei@127.0.0.1:6170
http-api = jivei@127.0.0.1:6171
# 使用HTTPS替代HTTP协议，需要先配置Mitm的CA证书，同时需要在客户端设备上手动安装并信任CA证书
http-api-tls = false
# 页面控制器：通过页面控制Surge， Safari输入127.0.0.1:6171,填入HTTP-API密码即可。
http-api-web-dashboard = true
# 允许热点共享
allow-hotspot-access = false
# DNS相关设置
# 传统 DNS 服务器设置
dns-server = 119.29.29.29,223.5.5.5
# 加密 DNS 服务器设置
#encrypted-dns-server = https://dns.alidns.com/dns-query
# encrypted-dns-server = https://dns.google/dns-query
# encrypted-dns-server = https://cloudflare-dns.com/dns-query
# encrypted-dns-server = https://dns.adguard.com/dns-query
# encrypted-dns-server = https://public.dns.iij.jp/dns-query
# 实验性 DNS ove QUIC 支持
# encrypted-dns-server = quic://dns.adguard.com
encrypted-dns-server = h3://223.5.5.5/dns-query
# 使加密 DNS 请求通过代理策略执行
encrypted-dns-follow-outbound-mode = false
# 跳过证书验证
encrypted-dns-skip-cert-verification = false
# (macOS 版本中，如果启用了 Set as System Proxy, 这些值会被写入到系统网络代理设置.)
# 从 /etc/hosts 中读取 DNS 记录（MAC）
# read-etc-hosts = true
# 对使用代理的请求强制使用本地 DNS 映射结果
# 默认情况下，当使用代理策略时，DNS 解析永远在代理服务器进行。
# 开启该选项后，对于存在于本地 DNS 映射中的域名，Surge 将使用本地映射结果的 IP 地址进行代理请求，而不再使用原始域名。
# 仅对使用了 IP 地址的本地映射记录生效。
use-local-host-item-for-proxy = true
# 本地 DNS 映射
# 该功能和 /etc/hosts 文件基本一致。
# 本地 DNS 映射位于 [Host] 字段下，格式为：域名 = IP 地址
# 除了直接指定主机名所对应的 IP 地址，还支持本地值指定域名、对特定域名自定义特定的 DNS 服务器。
# 以下是示例：
# 通配符
# *.example.com = 1.1.1.1
# 通配符支持 * 和 ?
# 本地值指定域名
# example.com = www.example.com
# 这相当于 CNAME 记录。
# 使用特定的 DNS 服务器
# 如域名 example.com 及其子域名指定使用 DNS 服务器 119.29.29.29 来解析：
# example.com = server:119.29.29.29
# *.example.com = server:119.29.29.29
# Surge 还支持配置部分域名回退到系统 DNS 解析：
# example.com = server:syslib
# 这可用于解决一些兼容性问题，比如一些 VPN 会利用 Split DNS 机制在系统中添加用于处理特定域名的 DNS 服务器，Surge 目前还不能支持这种复杂逻辑，可通过对 VPN 相关域名配置回退解决。
# TCP Force HTTP Hosts
# 使 Surge 将 TCP 连接视为 HTTP 请求。Surge HTTP 引擎将处理请求，并且所有高级功能都将可用，如截取、重写和脚本。
# 支持通配符 * 及 ?；
# 使用前缀 - 排除主机名；
# 默认情况下，只对 80 端口的请求进行处理（使用 example.com:443 指定端口或 example.com:0 表示所有端口）；
# <ip-address> 表示匹配所有主机名为 IP 地址的连接；
# <ipv4-address> 表示匹配所有主机名为 IPv4 地址的连接；
# <ipv6-address> 表示匹配所有主机名为 IPv6 地址的连接；
# 下面是一些示例：
# -*.apple.com：排除所有发往 *.apple.com 上的 80 端口的请求；
# www.google.com：对 www.google.com 上的 80 端口的请求强制使用 HTTP 处理；
# www.google.com:8080：对 www.google.com 上的 8080 端口的请求强制使用 HTTP 处理；
# www.google.com:0：对 www.google.com 上的所有端口的请求强制使用 HTTP 处理；
# *:0：对所有主机名上的所有端口使用强制 HTTP 处理。
# KOOWO - 119.18.193.135, 122.14.246.33, 123.59.31.1, 175.102.178.52
# TencentVideo/Youku/iQiyi - 116.253.24.*, 124.193.*, 124.14*, 119.79*, 175.6.26.*, 211.162.*, 220.112.* 220.169.153.*
force-http-engine-hosts = *.ott.cibntv.net, 119.18.193.135, 122.14.246.33, 123.59.31.1, 175.102.178.52, 116.253.24.*, 124.193.*, 124.14*, 119.79*, 175.6.26.*, 211.162.*, 220.112.* 220.169.153.*
# Always Raw TCP Hosts
# 用于强行关闭对特定主机名的主动协议探测，与 force-http-engine-hosts 参数的书写方法一致
# always-raw-tcp-hosts = example.com:80, <ip-address>:0
# Always Real IP Hosts
# 当 Surge VIF 处理 DNS 问题时，此选项要求 Surge 返回一个真正的 IP 地址，而不是一个 Fake IP。
# DNS 数据包将被转发到上游 DNS 服务器。
# 例如由于游戏主机会使用 STUN 技术进行 NAT 穿透，需要进行一些额外的配置才能正常工作。
always-real-ip = *.lan,*.direct,cable.auth.com,*.msftconnecttest.com,*.msftncsi.com,network-test.debian.org,detectportal.firefox.com,resolver1.opendns.com,*.srv.nintendo.net,*.stun.playstation.net,xbox.*.microsoft.com,*.xboxlive.com,stun.*,global.turn.twilio.com,global.stun.twilio.com,app.yinxiang.com,injections.adguard.org,local.adguard.org,cable.auth.com,localhost.*.qq.com,localhost.*.weixin.qq.com,*.logon.battlenet.com.cn,*.logon.battle.net,*.blzstatic.cn,music.163.com,*.music.163.com,*.126.net,musicapi.taihe.com,music.taihe.com,songsearch.kugou.com,trackercdn.kugou.com,api-jooxtt.sanook.com,api.joox.com,joox.com,y.qq.com,*.y.qq.com,streamoc.music.tc.qq.com,mobileoc.music.tc.qq.com,isure.stream.qqmusic.qq.com,dl.stream.qqmusic.qq.com,aqqmusic.tc.qq.com,amobile.music.tc.qq.com,*.xiami.com,*.music.migu.cn,music.migu.cn,proxy.golang.org,*.mcdn.bilivideo.cn,*.cmpassport.com,id6.me,open.e.189.cn,mdn.open.wo.cn,opencloud.wostore.cn,auth.wosms.cn,*.jegotrip.com.cn,*.icitymobile.mobi,*.pingan.com.cn,*.cmbchina.com,pool.ntp.org,*.pool.ntp.org,ntp.*.com,time.*.com,ntp?.*.com,time?.*.com,time.*.gov,time.*.edu.cn,*.ntp.org.cn,PDC._msDCS.*.*,DC._msDCS.*.*,GC._msDCS.*.*,www.google.com, 91.108.*, 5.28.195.*, 149.154.1*, 185.76.151.*, 91.105.1*,*.115.com,202.160.129.*
# VIF Excluded Routes
# Surge VIF 只能处理 TCP 和 UDP 协议。使用此选项可以绕过特定的 IP 范围，允许所有流量通过。
# ⚠️ 注意：此选项仅适用于 Surge VIF。Surge 代理服务器处理的请求不受影响。将「skip-proxy」和「tun-excluded-routes」组合起来，以确保特定的 HTTP 流量绕过 Surge。
# 此选项可能导致系统错误 ENOMEM (无法分配内存)。这看起来像是 iOS 系统中的一个 bug。如果可能，请不要使用此选项。
# tun-excluded-routes = 239.255.255.250/32
# VIF Included Routes
# 默认情况下，Surge VIF 接口会声明自己是默认路由。但是，由于 Wi-Fi 接口的路由较小，有些流量可能不会通过 Surge VIF 接口。使用此选项可以添加一条较小的路由。
# tun-included-routes = 192.168.1.12/32
# 路由防火墙
# 包含所有的网络请求
# include-all-networks = false
# 包含本地网络请求
# include-local-networks = false
# 高级
# 日志等级: warning, notify, info, verbose (默认值: notify)
# ⚠️ 不建议在日常使用中启用 verbose，因为这会严重降低性能。
loglevel = notify
# 排除简单主机名
exclude-simple-hostnames = true
#  udp-policy-not-supported-behaviour 参数用于控制当 UDP 流量被匹配到一个不支持 UDP 转发的策略时的行为
# DIRECT：回退到 DIRECT 策略（默认）
# REJECT：回退到 REJECT 策略
# 如一些海外游戏和语音使用 UDP 协议，而所使用的服务器不支持 UDP Relay 时，设置为 reject 将无法连接，但如果需要调整该参数的值为 direct，请务必清楚了解同一目标主机名 TCP 请求与 UDP 请求的源地址不同所造成的隐私及安全风险。
# udp-policy-not-supported-behaviour = REJECT
# Hijack DNS
# 默认情况下，Surge 只对发送到 Surge DNS 地址(198.18.0.2)的 DNS 查询返回 Fack IP 地址。发送到标准 DNS 的查询将被转发。
# 如 Google 系智能硬件产品会无视 DHCP 配置强行使用 8.8.8.8 和 8.8.4.4，需要配置 Surge 强行劫持才可以正常工作。
# 另外还可以使用 hijack-dns = *:53 来劫持所有的 DNS 查询。
hijack-dns = 8.8.8.8:53, 1.1.1.1:53, 8.8.4.4:53
# Show Reject Error Page
# 当遇到 REJECT 策略时显示错误页
show-error-page-for-reject = true
# 游戏优化模式
# 开启后会提高处理 UDP 流量的优先级，当系统负载高时会有比较明显的作用 (如高性能联机游戏)
udp-priority = true
# 新增两个参数（需要 iOS 16.4 以上版本）
# include-apns ：让 Surge 接管 Apple Push Notification service (APNs) 相关请求
# include-cellular-services：让 Surge 接管 VoLTE, Wi-Fi Calling, IMS, MMS, Visual Voicemail 等相关数据网络服务的请求
# 请注意，这两个选项仅应在有特殊需求时开启。正常情况下不应该开启以避免产生问题。


# Suspend
# 在特定网络下禁用 Surge：
# 例如：
# [SSID Setting]
# SSID:TP-Link suspend=true //示例，请勿启用
# MCCMNC:460-11 suspend=true //示例，请勿启用
# 如上示例在名为 TP-Link 的 Wi-Fi 或 MCC-MNC 代码为 460-11 的蜂窝网络时， Surge 都会临时禁用，它的表达式与子网策略组一样。
# 另外还支持通配符，如想在所有以 ChinaNet- 为开头的 Wi-Fi下临时禁用时，可以写作 SSID:ChinaNet-* suspend=true

# 子网策略组：Subnet
# 从 Surge iOS 4.12.0 及 Surge Mac 4.0.5 开始，SSID 策略组升级为 Subnet 策略组。
#   可使用 MCCMNC:100-200 匹配特定数据网络
#   可使用 SSID:value 特定匹配 SSID，支持通配符
#   可使用 BSSID:value 特定匹配 BSSID，支持通配符
#   可使用 ROUTER:value 特定匹配路由地址
#   可使用 TYPE:WIFI 匹配所有 WiFi 网络
#   可使用 TYPE:CELLULAR 匹配所有数据网络
#   可使用 TYPE:WIRED 匹配所有有线网络（iOS 上支持 USB 网络适配器）
#   如无前缀则按照旧版规则匹配 SSID、BSSID、路由地址
# SSID Setting 段内容从上至下依次匹配，匹配到第一个结果后立刻终止
# 增加了警告信息：由于 iOS 16.4 的新隐私策略，现在第三方应用无法获取数据网络服务商信息，MCC/MNC 的相关规则无法生效



[Proxy]
# 内置策略
# DIRECT 表示将该请求直接发往目标服务器
# REJECT 表示拒绝该请求，当连接类型为 HTTP 时，会返回一个错误页面。（该行为可被 show-error-page-for-reject 参数控制）
# REJECT-TINYGIF 表示拒绝该请求，当连接类型为 HTTP 时，返回一个 1px 的 GIF 图片响应。若为其他类型连接则直接断开。该策略主要用于 Web 广告屏蔽。
# REJECT-DROP 表示拒绝该请求，与 REJECT 不同的是，该策略将静默抛弃请求。因为部分程序有着十分暴力的重试逻辑，连接失败后会立刻进行重试，导致请求风暴。如果发往某主机名的请求短时间内大量触发 REJECT/REJECT-TINYGIF 策略（当前版本的阈值为 30 秒内 10 次），为了避免产生大量资源浪费，Surge 将自动升级策略为 REJECT-DROP 策略。
# REJECT-NO-DROP 表示不使用默认的自动丢包逻辑，这样 Surge 每次都会返回 ICMP Port Unreachable，应用会立刻回退而不是等超时。
# CELLULAR 表示优先使用数据网络；
# CELLULAR-ONLY 表示仅使用数据网络；
# HYBRID 表示尝试并发使用 Wi-Fi 和数据网络建立连接，仅当混合网络开关未开启时有意义。
# NO-HYBRID 表示当 Wi-Fi可用时永不尝试数据网络，仅当混合网络或 i-Fi 助力选项开启时有意义。
# - 新增 IPv4 & IPv6 偏好参数，对于所有策略，可附带参数 ip-version=，可选参数有：
# * dual：默认行为，在双栈网络上将并发使用 v4 和 v6 地址并选取最快速的结果。
# * prefer-v4：若DNS解析获得了 A 与 AAAA 记录，优先使用 A 记录，否则使用 AAAA 记录。
# * prefer-v6：若DNS解析获得了 A 与 AAAA 记录，优先使用 AAAA 记录，否则使用 A 记录。
# * v4-only：仅使用 A 记录，若未获得A记录则失败。
# * v6-only：仅使用 AAAA 记录，若未获得 AAAA 记录则失败。
# 可配合 direct 类型策略使用，如：IPV6-ONLY = direct, ip-version=v6-only
# HYBRID = direct, hybrid=true, ip-version=dual
国内直连 = direct, ip-version=prefer-v4

[Proxy Group]
# 策略组新增参数 external-policy-modifier，可用于对外部策略进行调整
# 例如 external-policy-modifier="tfo=true,test-url=http://www.apple.com/" 可开启 TFO 并修改测试 URL。
# 也可用于给外置策略配置 underlying-proxy。
# 服务器地址、用户名密码等基础信息不可被调整，其余参数均可被覆盖。
# 机场信息（encode地址链接: https://www.urlencoder.org）
# 该段定义可用的策略组
# Surge 提供多种不同类型的策略组以满足各种场景的不同需求。
# 「代理策略」配置在配置文件的 [Proxy Group] 下面
# 有 5 种策略组类型: "select", "url-test"，"fallback"，"ssid" 和 "load-balance"
# select: 具体哪个子策略将被使用，由用户界面上进行选择。
# url-test: 通过测试到某一个 URL 的访问确定延迟，并自动选择延迟最低的策略。
# 默认情况下使用 [General] 下的 proxy-test-url 设置的 URL 进行设置，Surge 将向该 URL 发送一个 HTTP HEAD 请求。测试只关心是否收到了返回数据，并不关心数据内容。仅支持 http:// 协议。
# 如想要对指定策略使用指定 URL 可以在该策略使用 test-url 参数设置（如上示例）。
# 参数:
# url: 必填
# 测试时用到的目标 URL.
# interval: 可选, 秒 (默认值: 600s)
# 每次测试的间隔时间。指定在多长时间后，上次的测试结果将被抛弃。
# 所有类 url-test 组的测试时机为：
# 首次使用时进行测试；
# 后续使用该策略组时，如果上次测试的时间间隔已大于 interval 设置时间，则再次触发测试；
# 当目前选中策略产生不可恢复性错误时，直接触发测试。
# 网络切换后，将清理之前的测试结果，当策略组被使用时触发首次测试。
# tolerance: 可选, 毫秒 (默认值: 100ms)
# 容忍度(毫秒)，仅当新测试的获胜策略超过旧获胜策略加上容忍度后再进行切换。如果某几个策略测试结果相差不大，那么会导致在这几个策略中频繁切换，如果策略的代理服务器的出口 IP 不同，可能会触发目标网站的风险控制。所以加入了容忍度设计，仅当新一次的测试结果中，最佳策略比原选中策略的延迟差大于容忍度时，才会切换至新的策略。
# timeout: 可选, 秒 (默认值: 5s)
# 测试的最长等待时间，如果某策略在该时间后依然没有完成，放弃该策略。
# evaluate-before-use: 可选，true or false
# 默认情况下，在首次使用策略组时将直接使用子策略中的第一个策略，同时触发延迟测试。如果配置了 evaluate-before-use=true，那么首次使用时将等待测试完毕后选择最佳策略
# URL 可用性自动测试策略组：Fallback
# fallback: 具体哪个子策略将被使用，通过测试到具体 URL 的可用性决定
# 与 url-test 组基本一致，区别是只关心子策略是否可用而不关心具体延迟，然后从可用策略中选择靠前的策略。可以通过调小 timeout 参数将缓慢线路也标记为不可用。该类型没有 tolerance 参数。
# ssid: 具体哪个子策略将被使用，根据 Wi-FI 的 SSID 决定
# 参数:
# default: 必填
# 默认策略。
# cellular: 可选
# 在数据网络下的策略。 若不填，那么默认策略将被使用。
# load-balance 策略组
# 负载均衡组，随机从子策略中选取一个策略使用。
# 当配置了 url 参数时，会按照 fallback 组的行为进行可用性检查，然后仅从可用的子策略中随机选取。
# 除 url、timeout、interval外，还有一个参数：
# • persistent：当 persistent=true 时，对于同一目标主机名，将尽量使用同一个策略。避免因出口 IP 不同而触发目标网站的风险控制。但当可用性改变时可能导致策略变化。
# hidden=1，隐藏策略组
# 禁用组策略变化通知
# 若要禁用组策略变化的通知，可以在该策略组加上 no-alert=true
# 外部代理列表
# 使用由代理服务商提供的代理列表，列表文件为一个纯文本，每一行包含一个代理声明。
# 也就是说可以将如下列示例的代理声明存成一个文本文件：
# Server1 = socks5, 192.168.1.2, 1080
# Server2 = socks5, 192.168.1.3, 1080
# Server3 = socks5, 192.168.1.4, 1080
# 然后在策略组中使用：
# Proxy = select, policy-path=https://www.example.com/Proxy.list
# 除了 select 策略组，也可以使用 url-test 等策略组进行自动选择。
# 外部代理列表还有两个选项：
# 自动更新间隔
# 可以使用 update-interval 来设置更新间隔，单位是秒，默认是 24 小时。
# Proxy = select, policy-path=https://www.example.com/Proxy.list, update-interval=86400
# 策略正则过滤器
# 可以使用 policy-regex-filter 选项来过滤代理列表，这是一个可选项，使用正则表达式匹配
# Proxy = select, policy-path=https://www.example.com/Proxy.list, update-interval=86400, policy-regex-filter=US
# 如上述示例可以只保留「外部代理列表」中代理名称带有「US」的代理服务器。
# 包含本地或其他策略组的策略
# 该功能主要为针对策略组的两个参数：include-all-proxies 及 include-other-group，可与 policy-regex-filter 一起使用。
# 先说 include-all-proxies，它用于是否包含 [Proxy] 中的代理策略：
# [Proxy]
# Server1 = socks5, 192.168.1.2, 1080
# Server2 = socks5, 192.168.1.3, 1080
# Server3 = socks5, 192.168.1.4, 1080
# [Proxy Group]
# PROXY = select, include-all-proxies=true
# [Rule]
# GEOIP,CN,DIRECT
# FINAL,PROXY,dns-failed
# 如上示例，当 include-all-proxies 设置为 true 或 1 时，PROXY 策略将包含 [Proxy] 下的三个策略 (等同于 PROXY = select, Server1, Server2, Server3)，使用 include-all-proxies 后就可以不用手动一个个添加策略。
# 而 include-other-group 用于设置该策略组是否包含其他策略组的策略，假设有多个订阅服务器列表的策略组：
# [Proxy Group]
# PROXY = select, A, B
# A = select, policy-path=https://www.example-a.com/Proxy.list
# B = select, policy-path=https://www.example-b.com/Proxy.list
# 按如上传统的做法，在选择代理服务时，先在图形菜单上的 PROXY 策略组下选择 A 列表或 B 列表，再到 A 或 B 列表下选择具体哪一个服务器。
# 那么如果想要在 PROXY 策略组下选择直接选择 A 与 B 列表里的所有服务器，就可以使用 include-other-group 参数：
# [Proxy Group]
# # 使用 include-other-group 直接使用使用某个策略组内的服务器节点
# PROXY = select, include-other-group="A,B"
# # 使用 hidden=true 隐藏掉该策略组
# A = select, policy-path=https://www.example-a.com/Proxy.list, hidden=true
# B = select, policy-path=https://www.example-b.com/Proxy.list, hidden=true
# 如上就可以在 PROXY 直接选择 A 与 B 里的所有服务器了。
# 以下是subnet的一个示例：
# 以代理服务器的选择模式实现广告的通过选择
# AdBlock = select, Ad-GIF,Ad-Block,Ad-Pass
# 场景选择模式
# 缺省走 Auto；蜂窝网络走 Proxy01；
# 接入 Wi-Fi 时走 Auto（SSIDNAME 改成需要判断的 Wi-Fi 的名称）
# Scene = ssid, default = Auto, cellular = Proxy01, "SSIDNAME" = Auto
# 自动选择代理
# Auto = fallback, Proxy01, Proxy02, Proxy03, url = http://www.bing.com/
# Video 策略群组的写法，将用于视频服务的代理放在一个群组（Netflix会判断代理的地域）
# Video = url-test, policy-path=groupHK.list, url = http://www.bing.com/
# Video 策略组的简单写法，两种写法可选一个
# Video = url-test, Proxy02, Proxy03, url = http://www.bing.com
# 节点筛选的正则
# 正则表达式筛选节点（区分大小写）
# ❤️ 正则说明
# 如下，匹配以“http”开头的整行字符串
# ^http.*$
# 如下匹配任意含http的整行
# ^.*http.*$
# 以上，^ 符号的意思为从行首第一个字符开始匹配；而 .*$ 符号则表示匹配整行，不含双引号。
# ❤️ 正则例子
# A或者B
# ^.*(A|B)
# 有A有B
# (A.*B|B.*A)
# 不含A
# ^(?!.*A)
# 有A但不含B
# ^(?!.*?B).*A
# A和B同时有
# (?=.*A)(?=.*B)
# 包含A、B、C的同时排除A、B、C和D、E、F各自互相组合的情况
# ^(?=.*A|B|C)(?!.*D|E|F).*$
# ❤️ Netflix 专用地区节点
# Netflix 新加坡节点
# ^(?=.*((?i)Netflix|NF|原生|解锁))(?=.*((?i)🇸🇬|新加坡|狮|(?i)SG|Singapore))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# Netflix 香港坡节点
# ^(?=.*((?i)Netflix|NF|原生|解锁))(?=.*((?i)🇭🇰|港|(?i)HK|Hong))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# Netflix 台湾节点
# ^(?=.*((?i)Netflix|NF|原生|解锁))(?=.*((?i)🇹🇼|台|(?i)TW|Tai))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# Netflix 日本节点
# ^(?=.*((?i)Netflix|NF|原生|解锁))(?=.*((?i)🇯🇵|日|川日|东京|大阪|泉日|埼玉|(?i)JP|Japan))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# Netflix 韩国节点
# ^(?=.*((?i)Netflix|NF|原生|解锁))(?=.*((?i)🇰🇷|韩|韓|首尔|(?i)KR|Korea))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# Netflix 美国节点
# ^(?=.*((?i)Netflix|NF|原生|解锁))(?=.*((?i)🇺🇸美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# ❤️ 地区节点
# 游戏节点
# ^(?=.*((?i)游戏|GAME))(?!.*((?i)回国|校园|教育|久虚|IPV6)).*$
# 回国节点
# ^(?=.*(回国))(?!.*((?i)校园|教育|久虚|IPV6)).*$
# 香港节点
# ^(?=.*((?i)🇭🇰|港|虚通|HK|Hong))(?!.*((?i)回国|校园|游戏|教育|GAME|IPV6)).*$
# 澳门节点
# ^(?=.*((?i)🇲🇴|澳门|MO|Oman))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 台湾节点
# ^(?=.*((?i)🇹🇼|台|TW|Tai))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 日本节点
# ^(?=.*((?i)🇯🇵|日|川日|东京|大阪|泉日|埼玉|JP|Japan))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 韩国节点
# ^(?=.*((?i)🇰🇷|韩|韓|首尔|KR|Korea))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 新加坡节点
# ^(?=.*((?i)🇸🇬|新加坡|狮|SG|Singapore))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 美国节点
# ^(?=.*((?i)🇺🇸|美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 加拿大节点
# ^(?=.*((?i)🇨🇦|加拿大|CA|Canada))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 俄罗斯节点
# ^(?=.*((?i)🇷🇺|俄|莫斯科|新西伯利亚|Новосиби́рская|Moscow|RU|Russia))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 英国节点
# ^(?=.*((?i)🇬🇧|英|伦敦|UK|United Kingdom))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 印度节点
# ^(?=.*((?i)🇮🇳|印|班加罗尔|孟买|Mumbai|IN|India))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 阿根廷节点
# ^(?=.*((?i)🇦🇷|阿根廷|AR|Argentinaia))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 土耳其节点
# ^(?=.*((?i)🇹🇷|土耳其|TR|TUR|Turkey))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 德国节点
# ^(?=.*((?i)🇩🇪|德|DE|Germany))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 荷兰节点
# ^(?=.*((?i)🇳🇱|荷|NL|Holland|Netherlands))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 澳大利亚节点
# ^(?=.*((?i)🇦🇺|澳大|AU|Australia))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 南非节点
# ^(?=.*((?i)🇿🇦|南非|ZA|South Africa))(?!.*((?i)回国|校园|游戏|教育|久虚|GAME|IPV6)).*$
# 全球节点（港🇭🇰澳🇲🇴台🇹🇼日🇯🇵韩🇰🇷新🇸🇬美🇺🇸）
# ^(?=.*((?i)🇭🇰|🇲🇴|🇹🇼|🇯🇵|🇰🇷|🇸🇬|🇺🇸|虚通|港|台|澳门|新加坡|狮|日|川日|东京|大阪|泉日|埼玉|韩|韓|首尔|美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|接P|HK|Hong|TW|Tai|Oman|SG|Singapore|JP|Japan|KR|Korea|United States|MO|US))(?!.*((?i)回国|校园|游戏|教育|(?i)GAME|IPV6)).*$



# 机场订阅策略组
# 机场订阅应当自策略组形式出现使用其他策略组引用而不是单独的配置文件
# 示例：
# 自定义机场策略组名称1 = select, policy-path=你的机场订阅地址node list替换到这里, include-all-proxies=1, no-alert=0, hidden=0
# 自定义机场策略组名称2 = select, policy-path=你的机场订阅地址node list替换到这里, include-all-proxies=1, no-alert=0, hidden=0
# 策略组（下面的节点信息需与外部节点对应，若删除了外部节点里的节点，那么在策略组里也要删除。）
# 机场
我可以随便改  = select, policy-path=替换机场订阅地址, update-interval=86400, no-alert=0, hidden=0, include-all-proxies=0
# 分流策略
# 油管
YouTube = select, 香港节点,台湾节点,新国节点,美国节点,日本节点, include-all-proxies=1
# 代理
PROXY = select, 香港节点,台湾节点,新国节点,美国节点,日本节点, no-alert=0, hidden=0, include-all-proxies=1
# Tiktok
TikTok = select, 香港节点,台湾节点,新国节点,美国节点,日本节点, no-alert=0, hidden=0, include-all-proxies=1
# Netflix
Netflix = select, 香港节点,台湾节点,新国节点,美国节点,日本节点, no-alert=0, hidden=0, include-all-proxies=1
# Disney
Disney = select, 香港节点,台湾节点,新国节点,美国节点,日本节点, no-alert=0, hidden=0, include-all-proxies=1
# ChatGPT
ChatGPT = select, 香港节点,台湾节点,新国节点,美国节点,日本节点, no-alert=0, hidden=0, include-all-proxies=1
# 节点筛选
香港节点 = select, include-all-proxies=1, include-other-group="我可以随便改", policy-regex-filter=^(?=.*((?i)🇭🇰|香港|港|(\b(HK|Hong)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$
台湾节点 = select, include-all-proxies=1, include-other-group="我可以随便改", policy-regex-filter=^(?=.*((?i)🇹🇼|台湾|台|(\b(TW|Tai|Taiwan)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$, no-alert=0, hidden=0
新国节点 = select, include-all-proxies=1, include-other-group="我可以随便改", policy-regex-filter=^(?=.*((?i)🇸🇬|新加坡|狮|(\b(SG|Singapore)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$, no-alert=0, hidden=0
美国节点 = select, include-all-proxies=1, include-other-group="我可以随便改", policy-regex-filter=^(?=.*((?i)🇺🇸|美国|美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|(\b(US|United States)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$, no-alert=0, hidden=0
日本节点 = select, include-all-proxies=1, include-other-group="我可以随便改", policy-regex-filter=^(?=.*((?i)🇯🇵|日本|川日|东京|大阪|泉日|埼玉|(\b(JP|Japan)\b)))(?!.*((?i)回国|校园|游戏|🎮|(\b(GAME)\b))).*$, no-alert=0, hidden=0

[Rule]
RULE-SET,https://raw.githubusercontent.com/jivei/Surge/main/DirectCorrect.list,国内直连
RULE-SET,https://raw.githubusercontent.com/jivei/Surge/main/Adguard.list,REJECT 
DOMAIN-SET,https://adrules.top/adrules.list,REJECT 
RULE-SET,https://raw.githubusercontent.com/jivei/Adblock/main/Adblock4limbo_surge.list,REJECT 
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/WeChat/WeChat.list,国内直连 
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/TikTok/TikTok.list,TikTok  
RULE-SET,https://github.com/blackmatrix7/ios_rule_script/blob/master/rule/Surge/Netflix/Netflix.list,Netflix
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/Disney/Disney.list,Disney
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/Speedtest/Speedtest.list,PROXY 
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/OpenAI/OpenAI.list,ChatGPT 
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/Telegram/Telegram.list,PROXY 
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/YouTube/YouTube.list,YouTube 
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/Microsoft/Microsoft.list,国内直连
RULE-SET,https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Surge/ChinaASN/ChinaASN.list,国内直连
IP-CIDR,0.0.0.0/32,REJECT,no-resolve
RULE-SET,LAN,国内直连
FINAL,PROXY,dns-failed


[Host]
# DNS 映射
# Router Admin Panel
*.id.ui.direct = server:syslib // Ubiquiti Unifi Network App
unifi.local = server:syslib // Ubiquiti Unifi OS
amplifi.lan = server:syslib // Ubiquiti Amplifi Router
router.synology.com = server:syslib // Synology Router
sila.razer.com = server:syslib // Razer Sila Router
router.asus.com = server:syslib // Asus Router
routerlogin.net = server:syslib // Netgear Router
orbilogin.com = server:syslib // Netgear Obri Router
www.LinksysSmartWiFi.com = server:syslib // Linksys Router
LinksysSmartWiFi.com = server:syslib // Linksys Router
myrouter.local = server:syslib // Linksys Router
instant.arubanetworks.com = server:syslib // Aurba Router
setmeup.arubanetworks.com = server:syslib // Aurba Router
www.miwifi.com = server:syslib // 小米 Mi WiFi Router
miwifi.com = server:syslib // 小米 Mi WiFi Router
mediarouter.home = server:syslib // 华为 Huawei Router
tplogin.cn = server:syslib // TP-Link Router
tplinklogin.net = server:syslib // TP-Link Router
tplinkwifi.net = server:syslib // TP-Link Router
melogin.cn = server:syslib // 水星 MERCURY Router
falogin.cn = server:syslib // 迅捷 FAST Router
tendawifi.com = server:syslib // 腾达 Tenda Router
leike.cc = server:syslib // 磊科 Netcore Router
zte.home = server:syslib // 中兴 ZTE Router
p.to = server:syslib // 斐讯 PHICOMM Router
phicomm.me = server:syslib // 斐讯 PHICOMM Router
hiwifi.com = server:syslib // 极路由 HiWiFi Router
peiluyou.com = server:syslib // 迅雷路由
_hotspot_.m2m = server:syslib // M2M routers at MiFi Hotspot
hotspot.cslwifi.com = server:syslib // csl Wi-Fi
# DNS 服务器
*.openai.com = 8.219.102.212
taobao.com = server:223.6.6.6
*.taobao.com = server:223.6.6.6
tmall.com = server:223.6.6.6
*.tmall.com = server:223.6.6.6
jd.com = server:119.29.29.29
*.jd.com = server:119.28.28.28
*.bilibili.com = server:119.29.29.29
*.alicdn.com = server:223.5.5.5
aliyun.com = server:223.5.5.5
*.aliyun.com = server:223.5.5.5
hdslb.com = server:119.29.29.29
163.com = server:119.29.29.29
*.163.com = server:119.29.29.29
126.com = server:119.29.29.29
*.126.com = server:119.29.29.29
*.126.net = server:119.29.29.29
*.127.net = server:119.29.29.29
*.netease.com = server:119.29.29.29
mi.com = server:119.29.29.29
*.mi.com = server:119.29.29.29
xiaomi.com = server:119.29.29.29
*.xiaomi.com = server:119.29.29.29
routerlogin.net = server:syslib
_hotspot_.m2m = server:syslib
router.asus.com = server:syslib
hotspot.cslwifi.com = server:syslib
amplifi.lan = server:syslib
*.lan = server:syslib

[MITM]
# > VIF 对原始 TCP 流量进行解密
skip-server-cert-verify = true
# > MITM 使用 HTTP/2 协议
tcp-connection = true
h2 = true
ca-passphrase = Dler
ca-p12 = MIIDGgIBAzCCAuAGCSqGSIb3DQEHAaCCAtEEggLNMIICyTCCAb8GCSqGSIb3DQEHBqCCAbAwggGsAgEAMIIBpQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQI5e4W8st2yMMCAggAgIIBeBDhcB5oCpEtPyamF2QSSZMoKnIQ9idB7/spS4BgYMq/zDT8c7SDSKM746+4D98feqkJmAYFUWlXtXOHwSR8QlFad9dTYw4SulHDpDAVr/+da6iCX+LeQuducormCI6xVcmpfZ8qvHWzpfHy5mrKxkuyj5OHlehvYOedDZ9P9s9ME2qZFsffKC4kk398QPjoBMLCb73m7QcFdzdus7NuVAd/kYZRww7ODcXcb5a45Yv4NeRwRjnVT8eCgjGXjJXQgJPAtyAWPLW+o1uS132Qdkmg+8EjwuxL/lOu3rLKh0gWWUFHcxv2rg4OcezyoZuv70zs3A8Ju3wmQ6oZuakeRuRyKu6+9BtgOqxnoBwvTMCI4saY8E318DWZjBOzg9N2vPOhKDeoh8ES9TAbRlcp5Bnp5TWrPhae+XeHlHde5KCr3kjB15/DAhrlh7+ht18I/p1shnRKAd1tH6p62to51j9mSHNxOFFCbBPiFqBSnPmuV2SSOOYHcjUwggECBgkqhkiG9w0BBwGggfQEgfEwge4wgesGCyqGSIb3DQEMCgECoIG0MIGxMBwGCiqGSIb3DQEMAQMwDgQI/FfHqSBxFUoCAggABIGQIJa8eopsdqunR4ZwxWt/ThhdkRw2LFHTbgg5jWdAUQfK2b+I6+Wk9Dimdb2xGzAaYcAVt3ArbfuDTjDUTI4m3pzXBe/edyeXagr6i6DgM9TluB4OsG6hC/MFtF3rvqnCT3DGf5b48hSj0Y5OfJy+iFXmasxtwVIf4pFFylXOOJeJdQry1NgImb0nZwsS8NJAMSUwIwYJKoZIhvcNAQkVMRYEFHijHPCciGG5pbv+qBYZvjpHBIFnMDEwITAJBgUrDgMCGgUABBSxzZGBSpKB8R5FQ6wdiWxFka+xcgQIxB+kS2hfUpkCAggA

